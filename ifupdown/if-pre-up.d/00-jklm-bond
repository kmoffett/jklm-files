#! /bin/bash
###
## Network Bonding Setup Script
## Copyright (C) 2006       Kyle Moffett <kyle@moffetthome.net>
## Copyright (C) 2007-2011  eXMeritus, A Boeing Company
##
## This program is free software; you can redistribute it and/or modify it
## under the terms of version 2 of the GNU General Public License, as
## published by the Free Software Foundation.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
## or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
## for more details.
##
## You should have received a copy of the GNU General Public License along
## with this program; otherwise you can obtain it here:
##   http://www.gnu.org/licenses/gpl-2.0.txt
###

## Throw up our hands and give up on errors
set -e

## If it's an already-existent interface then clearly we don't have anything
## to do:  "These aren't the droids we're looking for.  Move along."
ip link show "${IFACE}" >/dev/null 2>&1 && exit 0

## If nobody specified bonding devices then just ignore it
[ -z "${IF_BOND_DEVS+set}" ] && exit 0

## If it's an alias then the user put the bridge parameters on the wrong if
case "${IFACE}" in
*:*)
	echo "Cannot specify 'bond-*' parameters on interface aliases" >&2
	exit 1
	;;
esac

## Build a list of devices to add to the bridge
read -a dev_patterns <<<"${IF_BOND_DEVS}"
devs=()
for dev in "${dev_patterns[@]}"; do
	if [ "none" = "${dev}" ]; then
		continue;
	fi
	if [ "all" = "${dev}" ]; then
		dev='*'
	fi

	## Build a list of devices and iterate over it
	tmp="$(cd /sys/class/net && echo $dev)"
	read -a newdevs <<<"$tmp"
	for newdev in "${newdevs[@]}"; do
		## Make sure each device exists
		if ! ip link show dev "${newdev}" >/dev/null; then
			echo "ERROR: No such bonding slave '${newdev}'" >&2
			exit 1
		fi

		## Add it to the list of all devices
		devs+=("${newdev}")
	done
done

## Oh, we should probably make sure that bonding driver can be loaded
modprobe bonding max_bonds=0 >/dev/null 2>&1 || true
if ! [ -f /sys/class/net/bonding_masters ]; then
	echo "ERROR: Unable to locate bonding driver" >&2
	exit 1
fi

## Go ahead and create the new bonding interface
echo "+${IFACE}" >/sys/class/net/bonding_masters

## Apply configuration parameters and bring it up
paramfiles=( /sys/class/net/"${IFACE}"/bonding/* )
params=( "${paramfiles[@]##"/sys/class/net/${IFACE}/bonding/"}" )
for param in "${params[@]}"; do
	[ x"${param}" != x"slaves" ] || continue
	var="IF_BOND_${param//[^a-zA-Z0-9_]}"
	var="$(tr a-z A-Z <<<"${var}")"
	[ -n "${!var}" ] || continue
	echo "${!var}" >"/sys/class/net/${IFACE}/bonding/${param}"
done
ip link set dev "${IFACE}" up

## Add all the devices to the bridge (pre-down them first)
for dev in "${devs[@]}"; do
	## Turn the new interface off and clean up the flags
	ip link set dev "${dev}" down	\
		arp on			\
		dynamic off		\
		multicast off		\
		allmulticast off

	## Flush addresses
	ip addr flush dev "${dev}" 2>/dev/null

	## Disable IPv6 autoconf and duplicate-address-detection
	sysctl "net.ipv6.conf.${dev}.autoconf"=0
	sysctl "net.ipv6.conf.${dev}.dad_transmits"=0

	## Now add it to the bond
	echo "+${dev}" >/sys/class/net/"${IFACE}"/bonding/slaves
done
